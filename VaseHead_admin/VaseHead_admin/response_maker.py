from telegram.parsemode import ParseMode
import json
from telegram.keyboardbutton import KeyboardButton
from telegram.inline.inlinekeyboardbutton import InlineKeyboardButton
from telegram.inline.inlinekeyboardmarkup import InlineKeyboardMarkup
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
from VaseHead_admin import states
from VaseHead_admin import bot_settings
from VaseHead_admin.bot_settings import GetSettingsValue
from app.models import Client, MassSendingReport
from django.db.models import Q
from django.conf import settings

bot_instance = "BOT"

def GiveBot(bot):
    global bot_instance
    bot_instance = bot.bot

def SayHello(bot, update, self):
            bot.send_photo(chat_id=update.message.chat_id, photo=open('VaseHead_admin/header.jpg', 'rb'), caption =  update.message.from_user.first_name + ', ' + GetSettingsValue(bot_settings.wellcome))
            self.SetMyState(states.Share_contact);
            contact_keyboard = KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True, )
            custom_keyboard = [[contact_keyboard ]]
            reply_markup = ReplyKeyboardMarkup(custom_keyboard, resize_keyboard = True)
            bot.send_message(chat_id=update.message.chat_id, 
                             text = GetSettingsValue(bot_settings.littleasking),
                             parse_mode=ParseMode.HTML,
                             reply_markup=reply_markup);
def AskContact(bot, update, self):
            contact_keyboard = KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True, )
            custom_keyboard = [[contact_keyboard ]]
            reply_markup = ReplyKeyboardMarkup(custom_keyboard, resize_keyboard = True)
            bot.send_message(chat_id=update.message.chat_id, 
                             parse_mode=ParseMode.HTML,
                             reply_markup=reply_markup);
def AskAboutGender(bot, update, self):
            bot.send_message(chat_id=update.message.chat_id, 
                             text = "üëç",
                             parse_mode=ParseMode.HTML,
                             reply_markup=ReplyKeyboardRemove());
            button_list = [
                           [ InlineKeyboardButton("–ú", callback_data="Gender-–ú"),
                            InlineKeyboardButton("–ñ", callback_data="Gender-–ñ")]
                          ]
            reply_markup = InlineKeyboardMarkup(button_list)
            bot.send_message(chat_id=update.message.chat_id, 
                             text = GetSettingsValue(bot_settings.ask_gender),
                             parse_mode=ParseMode.HTML,
                             reply_markup=reply_markup)
def AskAboutAge(bot, update, self):
            button_list = [[
                            InlineKeyboardButton("14‚Äì24  –≠—Ö..–õ—É—á—à–µ–µ –≤—Ä–µ–º—è", callback_data="Age-14‚Äì24"),
                          ],[
                            InlineKeyboardButton("25‚Äì34  –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –≤ –¥–µ–ª–∞—Ö", callback_data="Age-25‚Äì34"),
                          ],[
                            InlineKeyboardButton("35‚Äì100 –ú—É–¥—Ä–æ—Å—Ç—å –ø—Ä–∏—à–ª–∞", callback_data="Age-35‚Äì100"),
                          ],
                          ]
            reply_markup = InlineKeyboardMarkup(button_list)
            bot.send_message(chat_id=update.callback_query.message.chat_id, 
                             text = GetSettingsValue(bot_settings.ask_age),
                             parse_mode=ParseMode.HTML,
                             reply_markup=reply_markup);
def AskAboutInvitation(bot, update, self):
            button_list = [[
                            InlineKeyboardButton("Instagram", callback_data="WhoInvited-Instagram"),
                            InlineKeyboardButton("Facebook", callback_data="WhoInvited-Facebook"),
                            InlineKeyboardButton("Google", callback_data="WhoInvited-Google")
                          ],[
                            InlineKeyboardButton("–î—Ä—É–∑—å—è", callback_data = "WhoInvited-–î—Ä—É–∑—å—è"),
                            InlineKeyboardButton("–í—ã—Å—Ç–∞–≤–∫–∞", callback_data="WhoInvited-–í—ã—Å—Ç–∞–≤–∫–∞")
                          ]
                          ]
            reply_markup = InlineKeyboardMarkup(button_list)
            bot.send_message(chat_id=update.callback_query.message.chat_id, 
                             text = GetSettingsValue(bot_settings.how_u_know_about_us),
                             parse_mode=ParseMode.HTML,
                             reply_markup=reply_markup);
def AskWhoAreU(bot, update, self):
            button_list = [[
                            InlineKeyboardButton("–°—Ç—É–¥–µ–Ω—Ç(–∫–∞)", callback_data="WhoAreU-–°—Ç—É–¥–µ–Ω—Ç(–∫–∞)"),
                          ],[
                            InlineKeyboardButton("–†–∞–±–æ—Ç–∞–µ—à—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏", callback_data="WhoAreU-–†–∞–±–æ—Ç–∞–µ—à—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏"),
                          ],[
                            InlineKeyboardButton("–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å", callback_data="WhoAreU-–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å"),
                          ],
                          ]
            reply_markup = InlineKeyboardMarkup(button_list)
            bot.send_message(chat_id=update.callback_query.message.chat_id, 
                             text = GetSettingsValue(bot_settings.who_are_u),
                             parse_mode=ParseMode.HTML,
                             reply_markup=reply_markup);
def LastQuestion(bot, update, self):
            bot.send_message(chat_id=update.callback_query.message.chat_id, 
                             text = GetSettingsValue(bot_settings.last_question),
                             parse_mode=ParseMode.HTML);
def AskAboutHobby(bot, update, self):
            button_list = [[
                            InlineKeyboardButton("–ò—Å–∫—É—Å—Å—Ç–≤–æ", callback_data="YourHobby-–ò—Å–∫—É—Å—Å—Ç–≤–æ"),
                            InlineKeyboardButton("–ë–∏–∑–Ω–µ—Å", callback_data="YourHobby-–ë–∏–∑–Ω–µ—Å"),
                            InlineKeyboardButton("–°–ø–æ—Ä—Ç", callback_data="YourHobby-–°–ø–æ—Ä—Ç")
                          ],[
                            InlineKeyboardButton("–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", callback_data = "YourHobby-–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"),
                            InlineKeyboardButton("–ö–Ω–∏–≥–∏", callback_data = "YourHobby-–ö–Ω–∏–≥–∏"),
                            InlineKeyboardButton("IT", callback_data="YourHobby-IT")
                          ]
                          ]
            reply_markup = InlineKeyboardMarkup(button_list)
            bot.send_message(chat_id=update.callback_query.message.chat_id, 
                             text = GetSettingsValue(bot_settings.what_hobby),
                             parse_mode=ParseMode.HTML,
                             reply_markup=reply_markup);
def SayThankU(bot, update, self):
            bot.send_message(chat_id=update.callback_query.message.chat_id, 
                             text = GetSettingsValue(bot_settings.thanx),
                             parse_mode=ParseMode.HTML);
def ShowMainMenu(bot, update, self):
            button_list = [[
                            KeyboardButton("üè™ –ú–∞–≥–∞–∑–∏–Ω"),
                            KeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞"),
                            KeyboardButton("üìñ –û –Ω–∞—Å")
                          ],[
                            KeyboardButton("ü§ù –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ"),
                            KeyboardButton("üîç –ö–∞–∫ –Ω–∞—Å –Ω–∞–π—Ç–∏")
                          ]
                          ]
            reply_markup = ReplyKeyboardMarkup(button_list, resize_keyboard = True)
            chat_id = ''
            try:
                chat_id = update.callback_query.message.chat_id
            except:
                chat_id = update.message.chat_id
            bot.send_message(chat_id=chat_id, 
                             text = '<b>–í—ã–±–∏—Ä–∞–π:</b>\n–ú–∞–≥–∞–∑–∏–Ω - —Ç—É—Ç –Ω–∞—à–∏ —Å–∫—É–ª—å–ø—Ç—É—Ä—ã\n–ö–æ—Ä–∑–∏–Ω–∞ - –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏\n–û –Ω–∞—Å - —Ç—É—Ç –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ\n–ê–∫—Ü–∏–∏ / –°–æ–±—ã—Ç–∏—è - –¥–µ—Ä–∂–∏–º –≤–∞—Å –≤ –∫—É—Ä—Å–µ\n–ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ - –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–∞–≤–∞—Ç—å –Ω–∞—Å –ö–∞–∫ –Ω–∞—Å –Ω–∞–π—Ç–∏ ? -–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤',
                             parse_mode=ParseMode.HTML,
                             reply_markup=reply_markup);
def SendYanasContact(bot, update, self):
    bot.send_contact(chat_id=update.callback_query.message.chat_id, 
                     phone_number=GetSettingsValue(bot_settings.admin_contact), 
                     first_name=GetSettingsValue(bot_settings.admin_name));
def ShowCoworking(bot, update):
            bot.send_photo(chat_id=update.message.chat_id, photo=open('VaseHead_admin/header2.jpg', 'rb'), caption =  '–•–æ—á–µ—à—å —Å—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º Vase Head?\n–†–æ—Å—Ç –ø—Ä–æ–¥–∞–∂ –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª 2018, –Ω–∞ 38% –±–æ–ª—å—à–µ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å 2017.')
            button_list = [
                           [ InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ...", callback_data="PartnershipDetails")],
                            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="MainMenu")],
                          ]
            reply_markup = InlineKeyboardMarkup(button_list)
            bot.send_message(chat_id=update.message.chat_id, 
                             text = '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º—ã –ø—Ä–æ–¥–∞–µ–º—Å—è –≤ —Å—Ç—Ä–∞–Ω–∞—Ö –°–ù–ì –∏ –ï–≤—Ä–æ–ø—ã.\n–ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü —É –Ω–∞—Å –Ω–æ–≤—ã–π —Ä–µ–ª–∏–∑ —Å–∫—É–ª—å–ø—Ç—É—Ä—ã, –∑–Ω–∞—á–∏—Ç –∫ –∫–æ–Ω—Ü—É 2018 –∏—Ö –±—É–¥–µ—Ç –∞–∂ 15 :)\n–ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ, –∫–ª–∏–∫–∞–π –∏ –ø—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.',
                             parse_mode=ParseMode.HTML,
                             reply_markup=reply_markup);
def AskHowUWillRealiseProducts(bot, update, self):
            self.newcoworking.user_id = update.callback_query.message.chat_id
            self.newcoworking.user_name = '{} {}'.format(update.callback_query.message.chat.first_name, update.callback_query.message.chat.last_name)
            print(self.newcoworking.user_id)
            button_list = [
                           [ InlineKeyboardButton("Online...", callback_data="Partner-Online")],
                            [InlineKeyboardButton("Offline", callback_data="Partner-Offline")],
                          ]
            reply_markup = InlineKeyboardMarkup(button_list, resize_keyboard = True) 
            bot.send_message(chat_id=update.callback_query.message.chat_id, 
                             text = '–ö–∞–∫ —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ü–∏—é Vase Head....?',
                             parse_mode=ParseMode.HTML,
                             reply_markup=reply_markup);
def AskCountry(bot, update, self):
            bot.send_message(chat_id=update.callback_query.message.chat_id, 
                             text = '–£–∫–∞–∂–∏ —Å—Ç—Ä–∞–Ω—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –ø–ª–∞–Ω–∏—Ä—É—é—Ç—Å—è –ø—Ä–æ–¥–∞–∂–∏ ....? \n(–ü—Ä–∏–º–µ—Ä: –°—Ç—Ä–∞–Ω–∞, –ì–æ—Ä–æ–¥)',
                             parse_mode=ParseMode.HTML);
            self.SetMyState(states.AskCountry)
def SayErrorInput(bot, update, self):
            bot.send_message(chat_id=update.message.chat_id, 
                             text = '–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë...',
                             parse_mode=ParseMode.HTML);
def AskSalesCount(bot, update, self):
        bot.send_message(chat_id=update.message.chat_id, text = '–û–∂–∏–¥–∞–µ–º—ã–π –∫–æ–ª-–≤–æ/ –æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂ –≤ –º–µ—Å—è—Ü ....? \n(–ü—Ä–∏–º–µ—Ä: 10 - 15)',
                             parse_mode=ParseMode.HTML);
def AskName(bot, update, self):
    bot.send_message(chat_id=update.message.chat_id, 
                             text = '–£–∫–∞–∂–∏ —Å–≤–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é....?\n(–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –¢–æ—Ä–æ–±–æ—Å–æ–≤)',
                             parse_mode=ParseMode.HTML)
    self.SetMyState(states.AskName);
def AskAboutRealeseSquare(bot, update, self):
    button_list = [[ InlineKeyboardButton("–î–∞", callback_data="RealiseSquare-Yes"),
                            InlineKeyboardButton("–ù–µ—Ç", callback_data="RealiseSquare-No")]]
    reply_markup = InlineKeyboardMarkup(button_list)
    bot.send_message(chat_id=update.message.chat_id, 
                             text = '–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –º–∞–≥–∞–∑–∏–Ω/ –ø–ª–æ—â–∞–¥–∫–∞....?',
                             parse_mode=ParseMode.HTML,
                             reply_markup = reply_markup)
    self.SetMyState(states.AskRealeseSquare)
def AskLink(bot, update, self):
    bot.send_message(chat_id=update.callback_query.message.chat_id, 
                             text = '–£–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É...?\n(–ü—Ä–∏–º–µ—Ä: <b>https://www.vase-head.com</b>)',
                             parse_mode=ParseMode.HTML);
    self.SetMyState(states.AskUrl);
def AskSocialNetwork(bot, update, self):
    bot.send_message(chat_id=update.message.chat_id, 
                             text = '–ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ —Å–æ—Ü. —Å–µ—Ç–∏ –∏ –¥—Ä. –≤–≤–µ–¥–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ....',
                             parse_mode=ParseMode.HTML);
    self.SetMyState(states.AskSocialNetwork);
def AskPhoneNumber(bot, update, self):
    bot.send_message(chat_id=update.message.chat_id, 
                             text = '–£–∫–∞–∂–∏ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω...?\n(–ü—Ä–∏–º–µ—Ä: +380730904800)',
                             parse_mode=ParseMode.HTML);
    self.SetMyState(states.AskPnoneNumber);
def AskPhoneNumber(bot, update, self):
    bot.send_message(chat_id=update.message.chat_id, 
                             text = '–£–∫–∞–∂–∏ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω...?\n(–ü—Ä–∏–º–µ—Ä: +380730904800)',
                             parse_mode=ParseMode.HTML);
    self.SetMyState(states.AskPnoneNumber);
def AskEmail(bot, update, self):
    bot.send_message(chat_id=update.message.chat_id, 
                             text = '–£–∫–∞–∂–∏ —Å–≤–æ—é  –ø–æ—á—Ç—É...?\n(–ü—Ä–∏–º–µ—Ä: info@info.com)',
                             parse_mode=ParseMode.HTML);
    self.SetMyState(states.AskEmail);
def SayHighFive(bot, update, self):
    bot.send_message(chat_id=update.message.chat_id, 
                             text = '–ó–∞ —É–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è - (–¥–∞–π –ø—è—Ç—å)\n–°–∫–æ—Ä–æ –∫—Ç–æ - —Ç–æ –≤—ã–π–¥–µ—Ç –Ω–∞ —Å–≤—è–∑—å —Å —Ç–æ–±–æ–π !!!',
                             parse_mode=ParseMode.HTML);
def SayHowToFindUs(bot, update, self):
    buttons = [[InlineKeyboardButton(text = 'üåê –°–∞–π—Ç', url ="https://www.vase-head.com/"),
                InlineKeyboardButton("üì± –¢–µ–ª–µ—Ñ–æ–Ω", callback_data = "Phone"),
                InlineKeyboardButton("üìß –≠–ª.–ø–æ—á—Ç–∞", url = "info@vase-head.com")]]
    bot.send_message(chat_id=update.message.chat_id, 
                             text = '–í—ã –º–æ–∂–µ—Ç–µ :\nüì∞ –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º —Å–∞–π—Ç–æ–º.\nüìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.\nüì¨  –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –Ω–∞ –ø–æ—á—Ç—É.',
                             parse_mode=ParseMode.HTML,
                             reply_markup = InlineKeyboardMarkup(buttons));
    SayShowRoomList(bot, update, self);
def SayShowRoomList(bot, update, self):
    buttons = [[InlineKeyboardButton('–ö–∏–µ–≤', callback_data ='–°ity-Kiev'),
                InlineKeyboardButton("–û–¥–µ—Å–∞", callback_data = '–°ity-Odesa'),
                InlineKeyboardButton("–•–∞—Ä—å–∫–æ–≤", callback_data = '–°ity-Kharkov')],
               [InlineKeyboardButton('–ó–∞–ø–æ—Ä–æ–∂—å–µ', callback_data ='–°ity-Zaporozhie'),
                InlineKeyboardButton('–ß–µ—Ä–Ω–æ–≤—Ü—ã', callback_data = '–°ity-Chernovtsi')]]
    bot.send_message(chat_id=update.message.chat_id, 
                             text = '–¢–∞–∫–∂–µ, –≤ —à–æ—É-—Ä—É–º–∞—Ö –ø–æ –≤—Å–µ–π –£–∫—Ä–∞–∏–Ω–µ',
                             parse_mode=ParseMode.HTML,
                             reply_markup = InlineKeyboardMarkup(buttons));
def SayShowRoomsAddress(bot, update, self):
    city = update.callback_query.data.split('-')[1]
    address = ''
    if city == 'Kiev':
        address = 'HIS, —É–ª. –ò–≤–∞–Ω–∞ –§–µ–¥–æ—Ä–æ–≤–∞ 1\nUa Made, –¢–†–¶ Lavina Mall\nAnnies Corner, —É–ª.–û.–ì–æ–Ω—á–∞—Ä–∞ 14\nNew Flora, —É–ª.–ì.–ê–ª–º–∞–∑–æ–≤–∞ 4\nSanctum, —É–ª.–î–æ—Ä–æ–≥–æ–∂–∏—Ü–∫–∞—è 1\nARKA Flowers, —É–ª.–†–µ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–Ω–∞—è 4 / 5\nFlorissima, –¢–¶ –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞\nWhitebeard Blackbird, —É–ª.–í–æ–∑–≤–¥–≤–∏–∂–µ–Ω—Å–∫–∞—è 40\nVeg Couture, —É–ª  –•–æ—Ä–µ–≤–∞ 21'
    if city == 'Odesa':
        address = 'Marry Berry, —É–ª. –ü–æ–ª—å—Å–∫–∞—è 12\nUtopia 8, —É–ª. –ñ—É–∫–æ–≤—Å–∫–æ–≥–æ 32\nHolovoy , —É–ª. –¢—Ä–æ–∏—Ü–∫–∞—è 45'
    if city == 'Kharkov':
        address = 'Utopia 8, —É–ª. –ü—É—à–∫–∏–Ω—Å–∫–∞—è 72'
    if city == 'Zaporozhie':
        address = 'Stl.Katin, –ø—Ä. –°–æ–±–æ—Ä–Ω—ã–π 216'
    if city == 'Chernovtsi':
        address = 'Lol Showroom, —É–ª. –ó–∞–Ω—å–∫–æ–≤–µ—Ü–∫–æ–π 3'

    bot.send_message(chat_id=update.callback_query.message.chat_id, 
                             text = address,
                             parse_mode=ParseMode.HTML);
def SayAboutUs (bot, update, self):
    buttons = [[
                InlineKeyboardButton("–ö —Å–∫—É–ª—å–ø—Ç—É—Ä–∞–º", callback_data = 'Magazine'),
                InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data = 'MainMenu')
                ]]
    bot.send_message(chat_id=update.message.chat_id, 
                             text = GetSettingsValue(bot_settings.about_us),
                             parse_mode=ParseMode.HTML,
                             reply_markup = InlineKeyboardMarkup(buttons));
def ShowMagazine (bot, update, self):
    items = self.GetItems() 
    color_text = '{} ({}/{})'.format(items[self.item_counter].images[self.item_color].split('.')[0].replace('photos/',''), self.item_color + 1, len(items[self.item_counter].images))
    buttons = [
                 [InlineKeyboardButton("‚¨ÖÔ∏è", callback_data = 'previous'), InlineKeyboardButton(str(self.item_counter + 1) + " –∏–∑ " + str(len(items)), callback_data = 'count'), InlineKeyboardButton("‚û°Ô∏è", callback_data = 'next')],
                 [InlineKeyboardButton("‚¨ÖÔ∏è", callback_data = 'previous_color'), InlineKeyboardButton(color_text, callback_data = 'count'), InlineKeyboardButton("‚û°Ô∏è", callback_data = 'next_color')],
                 [InlineKeyboardButton(items[self.item_counter].description, callback_data = 'description')],
                 [InlineKeyboardButton('–í –∫–æ—Ä–∑–∏–Ω—É({} UAH)'.format(items[self.item_counter].price), callback_data = 'buy-{}-{}'.format(items[self.item_counter].id, color_text.split(' ')[0]))]
               ]
    self.magazine = bot.send_photo(chat_id=update.message.chat_id, photo=open(settings.BASE_DIR + '/media/' + str(items[self.item_counter].images[self.item_color]), 'rb'), caption =  items[self.item_counter].name, reply_markup = InlineKeyboardMarkup(buttons))
def SelectNextGood(bot, update, self):
    items = self.GetItems() 
    bot.delete_message(chat_id = self.magazine.chat_id, message_id = self.magazine.message_id)
    self.item_color = 0
    self.item_counter=self.item_counter+1
    if self.item_counter > len(items)-1:
        self.item_counter = 0
    ShowMagazine(bot, update.callback_query, self)
def SelectPreviousGood(bot, update, self):
    items = self.GetItems() 
    bot.delete_message(chat_id = self.magazine.chat_id, message_id = self.magazine.message_id)
    self.item_color = 0
    self.item_counter=self.item_counter-1
    if self.item_counter < 0:
        self.item_counter = (len(items)-1)
    ShowMagazine(bot, update.callback_query, self)
def SelectPreviousColor(bot, update, self):
    items = self.GetItems() 
    bot.delete_message(chat_id = self.magazine.chat_id, message_id = self.magazine.message_id)
    self.item_color=self.item_color-1
    if self.item_color < 0:
        self.item_color = (len(items[self.item_counter].images)-1)
    ShowMagazine(bot, update.callback_query, self)
def SelectNextColor(bot, update, self):
    items = self.GetItems() 
    bot.delete_message(chat_id = self.magazine.chat_id, message_id = self.magazine.message_id)
    self.item_color=self.item_color+1
    if self.item_color > (len(items[self.item_counter].images)-1):
        self.item_color = 0
    ShowMagazine(bot, update.callback_query, self)
def MakeMassSending(data):
    gender_filter =data.getlist('gender_select')
    age_filter = data.getlist('age_select')
    invite_filter = data.getlist('invite_select')
    class_filter = data.getlist('class_select')
    hobby_filter = data.getlist('hobby_select')
    clients = Client.objects.all()
    filters = '–î–ª—è –≤—Å–µ—Ö'
    if gender_filter:
        clients = clients.filter(gender__in = gender_filter)
        filters = str(gender_filter) + ',\n'
    if age_filter:
        query = Q()
        for letter in age_filter:
            query = query | Q(age__startswith=letter)
        clients = clients.filter(query)
        filters = filters + str(age_filter) + ',\n'
    if invite_filter:
        clients = clients.filter(who_invired__in = invite_filter)
        filters = filters + str(invite_filter) + ',\n'
    if class_filter:
        clients = clients.filter(profession__in = class_filter)
        filters = filters + str(class_filter) + ',\n'
    if hobby_filter:
        clients = clients.filter(hobby__in = hobby_filter)
        filters = filters + str(hobby_filter)
    bot = bot_instance
    for c in clients:
        bot.send_message(chat_id = str(c.clientid), 
                             text = data.get('message_text'),
                             parse_mode=ParseMode.HTML);
    MassSendingReport(text = data.get('message_text'), description = data.get('description_input'),filter = filters.replace('[','').replace(']',''), count = len(clients)).save()
def ShowCart(bot, update, self):
    try:
        if self.cart_message:
            try:
                bot.delete_message(chat_id = self.cart_message.chat_id, message_id = self.cart_message.message_id)
            except:
                doNothing = 0;
        if not self.cart:
            bot.send_message(chat_id=update.message.chat_id, 
                                 text = '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.',
                                 parse_mode=ParseMode.HTML);
        else:
            buttons = []
            total = 0
            for g in self.cart:
                buttons.append([InlineKeyboardButton(g, callback_data ='cartremove-{}'.format(g))])
                total = total + float(g.split(' ')[2])
        
            buttons.append([InlineKeyboardButton('–û–ø–ª–∞—Ç–∏—Ç—å', callback_data ='pay')])
            self.cart_message = bot.send_message(chat_id=update.message.chat_id, 
                                     text = '–°—É–º–º–∞: {} UAH'.format(total),
                                     parse_mode=ParseMode.HTML,
                                     reply_markup = InlineKeyboardMarkup(buttons));
    except Exception as e:
        print(e)